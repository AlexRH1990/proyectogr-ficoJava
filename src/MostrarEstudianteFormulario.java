
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;


public class MostrarEstudianteFormulario extends JInternalFrame {

    private Estudiante student;
    private String studentID; // Almacena el ID para actualizar/eliminar
    

    public MostrarEstudianteFormulario(Estudiante estudiante, String studentID) {
        this.student = estudiante;
        this.studentID = studentID;
        initComponents();
        nombre.setInputVerifier(new InputVerifier() {
    @Override
    public boolean verify(JComponent input) {
        String texto = ((JTextField) input).getText();
        // Verificar si el texto contiene solo letras (incluyendo letras con acentos) y tiene más de 3 caracteres
        return texto.matches("[a-zA-ZáéíóúÁÉÍÓÚüÜñÑ]+") && texto.length() > 3;
    }
});
        apellido1.setInputVerifier(new InputVerifier() {
    @Override
    public boolean verify(JComponent input) {
        String texto = ((JTextField) input).getText();
        // Verificar si el texto contiene solo letras (incluyendo letras con acentos) y tiene más de 3 caracteres
        return texto.matches("[a-zA-ZáéíóúÁÉÍÓÚüÜñÑ]+") && texto.length() > 3;
    }
});
        apellido2.setInputVerifier(new InputVerifier() {
    @Override
    public boolean verify(JComponent input) {
        String texto = ((JTextField) input).getText();
        // Verificar si el texto contiene solo letras (incluyendo letras con acentos) y tiene más de 3 caracteres
        return texto.matches("[a-zA-ZáéíóúÁÉÍÓÚüÜñÑ]+") && texto.length() > 3;
    }
});
        
        
        // Establecer los campos del formulario con los datos del estudiante
        nombre.setText(student.getNombre());
        apellido1.setText(student.getApellido1());
        apellido2.setText(student.getApellido2());
        Carrera.setSelectedItem(student.getCarrera());
        proyecto1.setValue(student.getProyecto1());
        proyecto2.setValue(student.getProyecto2());
        foro.setValue(student.getForo());
        encuesta.setValue(student.getEncuesta());
        juego.setValue(student.getJuego());
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nombre = new javax.swing.JTextField();
        apellido1 = new javax.swing.JTextField();
        apellido2 = new javax.swing.JTextField();
        Carrera = new javax.swing.JComboBox<>();
        proyecto1 = new javax.swing.JSpinner();
        proyecto2 = new javax.swing.JSpinner();
        foro = new javax.swing.JSpinner();
        encuesta = new javax.swing.JSpinner();
        juego = new javax.swing.JSpinner();
        Aceptar = new javax.swing.JButton();
        Eliminar = new javax.swing.JButton();
        Salir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Carrera.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Medicina", "Ingeniería Civil", "Psicología", "Administración de Empresas", "Derecho", "Economía", "Enfermería", "Arquitectura", "Educación", "Ingeniería Informática", "Contabilidad", "Comunicación", "Marketing", "Biología", "Ciencias de la Computación" }));

        proyecto1.setToolTipText("");

        Aceptar.setText("Enviar");
        Aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AceptarActionPerformed(evt);
            }
        });

        Eliminar.setText("EliminarEstudiante");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre");

        jLabel2.setText("Apellido 1");

        jLabel3.setText("Apellido 2");

        jLabel4.setText("Carrera");

        jLabel5.setText("Proyecto 1");

        jLabel6.setText("Proyecto 2");

        jLabel7.setText("Foro");

        jLabel8.setText("Encuesta");

        jLabel9.setText("Juego");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(Eliminar)
                                .addGap(30, 30, 30)
                                .addComponent(Aceptar)))
                        .addGap(18, 18, 18)
                        .addComponent(Salir))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(106, 106, 106)
                            .addComponent(foro, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(proyecto2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(proyecto1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(apellido2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(apellido1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(73, 73, 73)
                                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(70, 70, 70)
                                .addComponent(Carrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(juego, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(encuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 271, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(apellido1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9)
                                .addComponent(jLabel3))
                            .addComponent(apellido2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(Carrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(proyecto1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(proyecto2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(foro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(jLabel8))
                    .addComponent(encuesta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(juego, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Eliminar)
                    .addComponent(Aceptar)
                    .addComponent(Salir))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AceptarActionPerformed
            updateStudent();
   
                        
    }//GEN-LAST:event_AceptarActionPerformed

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        deleteStudent(); /**Debo aclarar, que este botón elimina los antiguos datos en Estudiante.txt 
         y Promedios.txt, comparto que la localización pueda parecer contrainuitiva*/
    }//GEN-LAST:event_EliminarActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
         this.dispose(); 
    }//GEN-LAST:event_SalirActionPerformed

    
    
    private void updateStudent() {
    String filePath = "Estudiantes.txt"; // Ruta completa del archivo
    File originalFile = new File(filePath);
    File tempFile = new File(filePath + "tmp");
    BufferedWriter bw = null;

    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
        bw = new BufferedWriter(new FileWriter(tempFile)); // Usar el archivo temporal para la escritura

        // Leer el archivo y actualizar los datos del estudiante con el ID proporcionado
        String linea;
        while ((linea = br.readLine()) != null) {
            String[] datos = linea.split(",");
            if (datos[0].equals(studentID)) {
                // Actualizar los datos del estudiante
                datos[1] = nombre.getText();
                datos[2] = apellido1.getText();
                datos[3] = apellido2.getText();
                datos[4] = (String) Carrera.getSelectedItem();
                datos[5] = String.valueOf(proyecto1.getValue());
                datos[6] = String.valueOf(proyecto2.getValue());
                datos[7] = String.valueOf(foro.getValue());
                datos[8] = String.valueOf(encuesta.getValue());
                datos[9] = String.valueOf(juego.getValue());
                bw.write(String.join(",", datos));
            } else {
                bw.write(linea);
            }
            bw.newLine();
        }
        
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al actualizar estudiante en el archivo");
        return; // Salir del método si ocurre un error
    } finally {
        // Cerrar el BufferedWriter para asegurar que todos los datos se escriban en el archivo
        try {
            if (bw != null) {
                bw.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al cerrar el BufferedWriter");
            return; // Salir del método si ocurre un error
        } 
    }

    // Renombrar el archivo temporal al original
    try {
        if (originalFile.delete()) {
            tempFile.renameTo(originalFile);
            JOptionPane.showMessageDialog(null, "Estudiante actualizado");
        } else {
            JOptionPane.showMessageDialog(null, "Error al actualizar estudiante en el archivo");
        }
    } catch (SecurityException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "No se tiene permiso para eliminar el archivo original");
    }updatePromedios(studentID, nombre.getText(), apellido1.getText(), apellido2.getText(), 
                        (String) Carrera.getSelectedItem(), (int) proyecto1.getValue(), 
                        (int) proyecto2.getValue(), (int) foro.getValue(), 
                        (int) encuesta.getValue(), (int) juego.getValue());
}


private void deleteStudent() {
    String filePath = "Estudiantes.txt"; // Ruta completa del archivo de estudiantes
    String promediosFilePath = "Promedios.txt"; // Ruta completa del archivo de promedios
    File originalFile = new File(filePath);
    File tempFile = new File(filePath + "tmp");
    File promediosFile = new File(promediosFilePath);
    File tempPromediosFile = new File(promediosFilePath + "tmp");
    BufferedWriter bw = null;
    BufferedWriter promediosBw = null;

    try (BufferedReader br = new BufferedReader(new FileReader(filePath));
         BufferedReader promediosBr = new BufferedReader(new FileReader(promediosFilePath))) {
        
        // Crear BufferedWriter para el archivo temporal de estudiantes
        bw = new BufferedWriter(new FileWriter(tempFile));
        
        // Leer el archivo de estudiantes y escribir en el archivo temporal, excepto la línea que se desea eliminar
        String linea;
        while ((linea = br.readLine()) != null) {
            String[] datos = linea.split(",");
            if (!datos[0].equals(studentID)) {
                bw.write(linea);
                bw.newLine();
            }
        }

        // Crear BufferedWriter para el archivo temporal de promedios
        promediosBw = new BufferedWriter(new FileWriter(tempPromediosFile));
        
        // Leer el archivo de promedios y escribir en el archivo temporal, excepto la línea que se desea eliminar
        String promediosLine;
        while ((promediosLine = promediosBr.readLine()) != null) {
            String[] promediosData = promediosLine.split(",");
            if (!promediosData[0].equals(studentID)) {
                promediosBw.write(promediosLine);
                promediosBw.newLine();
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al eliminar estudiante o promedio del archivo");
        return; // Salir del método si ocurre un error
    } finally {
        // Cerrar BufferedWriter para el archivo de estudiantes
        try {
            if (bw != null) {
                bw.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al cerrar el BufferedWriter para el archivo de estudiantes");
            return; // Salir del método si ocurre un error
        }
        
        // Cerrar BufferedWriter para el archivo de promedios
        try {
            if (promediosBw != null) {
                promediosBw.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al cerrar el BufferedWriter para el archivo de promedios");
            return; // Salir del método si ocurre un error
        }
    }

    // Renombrar el archivo temporal al original para estudiantes
    try {
        if (originalFile.delete()) {
            tempFile.renameTo(originalFile);
            JOptionPane.showMessageDialog(null, "Estudiante eliminado");
        } else {
            JOptionPane.showMessageDialog(null, "Error al eliminar estudiante del archivo");
        }
    } catch (SecurityException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "No se tiene permiso para eliminar el archivo original");
    }

    // Renombrar el archivo temporal al original para promedios
    try {
        if (promediosFile.delete()) {
            tempPromediosFile.renameTo(promediosFile);
            JOptionPane.showMessageDialog(null, "Promedio eliminado");
        } else {
            JOptionPane.showMessageDialog(null, "Error al eliminar promedio del archivo");
        }
    } catch (SecurityException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "No se tiene permiso para eliminar el archivo de promedios");
    }  updatePromedios(studentID, nombre.getText(), apellido1.getText(), apellido2.getText(), 
                        (String) Carrera.getSelectedItem(), (int) proyecto1.getValue(), 
                        (int) proyecto2.getValue(), (int) foro.getValue(), 
                        (int) encuesta.getValue(), (int) juego.getValue());
} 


    /**
     * @param args the command line arguments
     */
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Aceptar;
    private javax.swing.JComboBox<String> Carrera;
    private javax.swing.JButton Eliminar;
    private javax.swing.JButton Salir;
    private javax.swing.JTextField apellido1;
    private javax.swing.JTextField apellido2;
    private javax.swing.JSpinner encuesta;
    private javax.swing.JSpinner foro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSpinner juego;
    private javax.swing.JTextField nombre;
    private javax.swing.JSpinner proyecto1;
    private javax.swing.JSpinner proyecto2;
    // End of variables declaration//GEN-END:variables

public void updatePromedios(String studentID, String nombre, String apellido1, String apellido2, String carrera, int proyecto1, int proyecto2, int foro, int encuesta, int juego) {
    ArrayList<String> promediosData = new ArrayList<>();
    try (BufferedReader reader = new BufferedReader(new FileReader("Promedios.txt"))) {
        String line;
        while ((line = reader.readLine()) != null) {
            promediosData.add(line);
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al leer el archivo de promedios");
        return;
    }

    // Find and update the student's data in promediosData
    for (int i = 0; i < promediosData.size(); i++) {
        String[] parts = promediosData.get(i).split(",");
        if (parts[0].equals(studentID)) {
            // Update the student's information
            parts[1] = nombre;
            parts[2] = apellido1;
            parts[3] = apellido2;
            parts[4] = carrera;
            // Recalculate the average using the provided grades
            int promedio = calcularPromedio(proyecto1, proyecto2, foro, encuesta, juego);
            parts[5] = String.valueOf(promedio); // Update the average
            // Join the parts back into a line and replace the old line in the list
            promediosData.set(i, String.join(",", parts));
            break;
        }
    }

    try (BufferedWriter writer = new BufferedWriter(new FileWriter("Promedios.txt"))) {
        for (String dataLine : promediosData) {
            writer.write(dataLine);
            writer.newLine();
        }
        JOptionPane.showMessageDialog(null, "Promedios actualizados correctamente");
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al escribir en el archivo de promedios");
    }
}

// Method to calculate the average as an int
private int calcularPromedio(int proyecto1, int proyecto2, int foro, int encuesta, int juego) {
    // Calculate the average using the provided grades
    return (proyecto1 + proyecto2 + foro + encuesta + juego) / 5;
}



}